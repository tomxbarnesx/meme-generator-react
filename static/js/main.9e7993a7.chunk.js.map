{"version":3,"sources":["components/Header.js","components/Footer.js","components/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","Footer","href","MemeGenerator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","topText","bottomText","allMemeImages","randomImg","handleChange","bind","assertThisInitialized","handleSubmit","e","_e$target","target","name","value","setState","defineProperty","_this2","fetch","then","response","json","memes","data","console","log","preventDefault","randomNum","Math","floor","random","length","randomImage","url","className","onSubmit","type","placeholder","onChange","src","alt","Component","App","components_Header","components_MemeGenerator","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mQAUeA,MARf,SAAgBC,GACZ,OACIC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,8BCKGC,MARf,SAAgBJ,GACZ,OACIC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,2BAAR,iCC8DAC,cAhEX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACTC,SAAS,EACTC,QAAS,GACTC,WAAY,GACZC,cAAe,GACfC,UAAW,iCAEfZ,EAAKa,aAAeb,EAAKa,aAAaC,KAAlBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACpBA,EAAKgB,aAAehB,EAAKgB,aAAaF,KAAlBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAVXA,4EAaAiB,GAAG,IAAAC,EACUD,EAAEE,OAAjBC,EADKF,EACLE,KAAMC,EADDH,EACCG,MACblB,KAAKmB,SAALrB,OAAAsB,EAAA,EAAAtB,CAAA,GACKmB,EAAOC,gDAIG,IAAAG,EAAArB,KACfA,KAAKmB,SAAS,CAACd,SAAS,IAExBiB,MAAM,qCACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GAAY,IACPE,EAASF,EAASG,KAAlBD,MACPE,QAAQC,IAAIH,EAAM,IAClBL,EAAKF,SAAS,CACVX,cAAekB,EACfrB,SAAS,2CAKZS,GACTA,EAAEgB,iBACF,IAAIC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWlC,KAAKI,MAAMI,cAAc2B,QAChEC,EAAcpC,KAAKI,MAAMI,cAAcuB,GAAWM,IACtDrC,KAAKmB,SAAS,CACVV,UAAW2B,qCAKf,OACI7C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAM6C,UAAU,YAAYC,SAAUvC,KAAKa,cACvCtB,EAAAC,EAAAC,cAAA,SAAO+C,KAAK,OAAOvB,KAAK,UAAUwB,YAAY,WAAWvB,MAAOlB,KAAKI,MAAME,QAASoC,SAAU1C,KAAKU,eACnGnB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAO+C,KAAK,OAAOvB,KAAK,aAAawB,YAAY,cAAcvB,MAAOlB,KAAKI,MAAMG,WAAYmC,SAAU1C,KAAKU,eAC5GnB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,sBAEJF,EAAAC,EAAAC,cAAA,OAAK6C,UAAU,QACX/C,EAAAC,EAAAC,cAAA,OAAKkD,IAAK3C,KAAKI,MAAMK,UAAWmC,IAAI,KACpCrD,EAAAC,EAAAC,cAAA,MAAI6C,UAAU,OAAOtC,KAAKI,MAAME,SAChCf,EAAAC,EAAAC,cAAA,MAAI6C,UAAU,UAAUtC,KAAKI,MAAMG,qBA1D3BsC,aCgBbC,mLAVX,OACEvD,EAAAC,EAAAC,cAAA,OAAK6C,UAAU,OACb/C,EAAAC,EAAAC,cAACsD,EAAD,MACAxD,EAAAC,EAAAC,cAACuD,EAAD,MACAzD,EAAAC,EAAAC,cAACwD,EAAD,cANUJ,aCMEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.9e7993a7.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header(props) {\n    return (\n        <header>\n            <h1>Meme Generator</h1>\n        </header>\n    )\n}\n\nexport default Header","import React from 'react';\n\nfunction Footer(props) {\n    return (\n        <footer>\n            <p><a href=\"https://tomxbarnesx.com\">@tomxbarnesx</a></p>\n        </footer>\n    )\n}\n\nexport default Footer","import React, { Component } from 'react';\n\nclass MemeGenerator extends Component {\n    constructor(){\n        super()\n        this.state = {\n            loading: false,\n            topText: \"\",\n            bottomText: \"\",\n            allMemeImages: [],\n            randomImg: \"http://i.imgflip.com/1bij.jpg\"\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleChange(e) {\n        const {name, value} = e.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    componentDidMount(){\n        this.setState({loading: true})\n\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then(response => response.json())\n            .then(response => {\n                const {memes} = response.data;\n                console.log(memes[0]);\n                this.setState({\n                    allMemeImages: memes,\n                    loading: false\n                });  \n            });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        let randomNum = Math.floor(Math.random() * this.state.allMemeImages.length);\n        let randomImage = this.state.allMemeImages[randomNum].url\n        this.setState({\n            randomImg: randomImage\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n                    <input type=\"text\" name=\"topText\" placeholder=\"Top Text\" value={this.state.topText} onChange={this.handleChange}/>\n                    <br/>\n                    <input type=\"text\" name=\"bottomText\" placeholder=\"Bottom Text\" value={this.state.bottomText} onChange={this.handleChange}/>\n                    <br />\n                    <button>Gen</button>\n                </form>\n                <div className=\"meme\">\n                    <img src={this.state.randomImg} alt=\"\" />\n                    <h2 className=\"top\">{this.state.topText}</h2>\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MemeGenerator","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport MemeGenerator from './components/MemeGenerator';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <MemeGenerator />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}